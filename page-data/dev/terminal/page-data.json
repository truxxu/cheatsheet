{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/dev/terminal","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Terminal\",\n  \"description\": \"Config for terminal\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I am fond of working with Terminator as terminal emulator and zsh as my shell.\\nSo, first we need  to install these two:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Terminator\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo apt install terminator\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ohmyzsh\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo apt install -y zsh curl vim nodejs imagemagick jq\\nsh -c \\\"$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\\\"\\nsudo reboot\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"ohmyzsh plugins\"), mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"gitfast\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"last-working-dir\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"common-aliases\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"sublime\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"zsh-syntax-highlighting\"), mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"history-substring-search\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"zshrc config file\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"ZSH=$HOME/.oh-my-zsh\\n\\n# You can change the theme with another one:\\n# https://github.com/robbyrussell/oh-my-zsh/wiki/themes\\nZSH_THEME=\\\"robbyrussell\\\"\\n\\n# Useful plugins for Web development with Sublime Text\\nplugins=(gitfast last-working-dir common-aliases sublime zsh-syntax-highlighting history-substring-search)\\n\\n# Prevent Homebrew from reporting - https://github.com/Homebrew/brew/blob/master/share/doc/homebrew/Analytics.md\\nexport HOMEBREW_NO_ANALYTICS=1\\n\\n# Actually load Oh-My-Zsh\\nsource \\\"${ZSH}/oh-my-zsh.sh\\\"\\nunalias rm # No interactive rm by default (brought by plugins/common-aliases)\\n\\n# Load rbenv if installed\\nexport PATH=\\\"${HOME}/.rbenv/bin:${PATH}\\\"\\ntype -a rbenv > /dev/null && eval \\\"$(rbenv init -)\\\"\\n\\n# Rails and Ruby uses the local `bin` folder to store binstubs.\\n# So instead of running `bin/rails` like the doc says, just run `rails`\\n# Same for `./node_modules/.bin` and nodejs\\nexport PATH=\\\"./bin:./node_modules/.bin:${PATH}:/usr/local/sbin\\\"\\n\\n# Store your own aliases in the ~/.aliases file and load the here.\\n[[ -f \\\"$HOME/.aliases\\\" ]] && source \\\"$HOME/.aliases\\\"\\n\\n# Encoding stuff for the terminal\\nexport LANG=en_US.UTF-8\\nexport LC_ALL=en_US.UTF-8\\nexport BUNDLER_EDITOR=\\\"subl $@ >/dev/null 2>&1 -a\\\"\\nexport BUNDLER_EDITOR=\\\"subl $@ >/dev/null 2>&1 -a\\\"\\nexport BUNDLER_EDITOR=\\\"subl $@ >/dev/null 2>&1 -a\\\"\\nexport BUNDLER_EDITOR=\\\"subl $@ >/dev/null 2>&1 -a\\\"\\nexport BUNDLER_EDITOR=\\\"subl $@ >/dev/null 2>&1 -a\\\"\\nexport BUNDLER_EDITOR=\\\"subl $@ >/dev/null 2>&1 -a\\\"\\nexport BUNDLER_EDITOR=\\\"subl $@ >/dev/null 2>&1 -a\\\"\\n\\nexport NVM_DIR=\\\"$([ -z \\\"${XDG_CONFIG_HOME-}\\\" ] && printf %s \\\"${HOME}/.nvm\\\" || printf %s \\\"${XDG_CONFIG_HOME}/nvm\\\")\\\"\\n[ -s \\\"$NVM_DIR/nvm.sh\\\" ] && \\\\. \\\"$NVM_DIR/nvm.sh\\\" # This loads nvm\\n\\n# Necessary for Android Studio/React Native\\nexport ANDROID_HOME=$HOME/Android/Sdk\\nexport PATH=$PATH:$ANDROID_HOME/emulator\\nexport PATH=$PATH:$ANDROID_HOME/tools\\nexport PATH=$PATH:$ANDROID_HOME/tools/bin\\nexport PATH=$PATH:$ANDROID_HOME/platform-tools\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{},"frontmatter":{"title":"Terminal","description":"Config for terminal"}}},"pageContext":{"id":"808046d3-4d07-5cef-9c6f-eca399dd1988"}},"staticQueryHashes":["2575348879","2936798523","2940813629"]}