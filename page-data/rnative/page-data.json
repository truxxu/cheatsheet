{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/rnative","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"React Native\",\n  \"description\": \"Using RN to produce mobile apps\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"test-release-variant\"\n  }, \"Test Release Variant\"), mdx(\"p\", null, \"Run to test a release version through adb\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npx react-native run-android --variant=release\\n\")), mdx(\"h2\", {\n    \"id\": \"sign-release\"\n  }, \"Sign Release\"), mdx(\"p\", null, \"Create signing key\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"keytool -genkey -v -keystore your_key_name.keystore -alias your_key_alias -keyalg RSA -keysize 2048 -validity 10000\\n\")), mdx(\"p\", null, \"Move key into android folder\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"mv ./mykey.keystore ./android/app\\n\")), mdx(\"p\", null, \"Add variables to ~/.gradle/gradle.properties\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore\\nMYAPP_UPLOAD_KEY_ALIAS=my-key-alias\\nMYAPP_UPLOAD_STORE_PASSWORD=*****\\nMYAPP_UPLOAD_KEY_PASSWORD=*****\\n\")), mdx(\"p\", null, \"Add signing config for release to android/app/build.gradle\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"signingConfigs{\\n  ...\\n  release {\\n      if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {\\n          storeFile file(MYAPP_UPLOAD_STORE_FILE)\\n          storePassword MYAPP_UPLOAD_STORE_PASSWORD\\n          keyAlias MYAPP_UPLOAD_KEY_ALIAS\\n          keyPassword MYAPP_UPLOAD_KEY_PASSWORD\\n      }\\n  }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"buildTypes {\\n  ...\\n  release {\\n    signingConfig signingConfigs.release\\n    ...\\n  }\\n}\\n\")), mdx(\"p\", null, \"Create folder android/app/src/main/assets\"), mdx(\"p\", null, \"Run command\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/\\n\")), mdx(\"h2\", {\n    \"id\": \"generate-apk\"\n  }, \"Generate APK\"), mdx(\"p\", null, \"Run command to generate APK\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"rm -rf android/app/src/main/res/drawable-*\\n\\nnpx react-native bundle --platform android --dev false \\\\\\n  --entry-file index.js \\\\\\n  --bundle-output android/app/src/main/assets/index.android.bundle \\\\\\n  --assets-dest android/app/build/intermediates/res/merged/release/\\n\\ncd android && ./gradlew assembleRelease\\n\")), mdx(\"p\", null, \"Find APK file\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"~/my-app/android/app/build/outputs/apk/release\\n\")), mdx(\"h2\", {\n    \"id\": \"generate-aab\"\n  }, \"Generate AAB\"), mdx(\"p\", null, \"Run command to generate AAB\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"cd android\\n./gradlew bundleRelease\\n\")), mdx(\"p\", null, \"Find AAB file\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"~/my-app/android/app/build/outputs/bundle/release/app-release.aab\\n\")), mdx(\"h2\", {\n    \"id\": \"reload-env-variables\"\n  }, \"Reload .env variables\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npx react-native start --reset-cache\\n\")), mdx(\"h2\", {\n    \"id\": \"show-async-storage-values\"\n  }, \"Show Async Storage Values\"), mdx(\"p\", null, \"Using the RN Debugger it is possible to see what is stored in Async Storage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"showAsyncStorageContentInDev()\\n\")), mdx(\"h2\", {\n    \"id\": \"add-custom-fonts\"\n  }, \"Add custom fonts\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add ttf files to /assets/fonts/\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create file react-native.config.js and add the following config:\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"module.exports = {\\n  project: {\\n    ios: {},\\n    android: {},\\n  },\\n  assets: ['./assets/fonts/'],\\n};\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Run command\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npx react-native link\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#test-release-variant","title":"Test Release Variant"},{"url":"#sign-release","title":"Sign Release"},{"url":"#generate-apk","title":"Generate APK"},{"url":"#generate-aab","title":"Generate AAB"},{"url":"#reload-env-variables","title":"Reload .env variables"},{"url":"#show-async-storage-values","title":"Show Async Storage Values"},{"url":"#add-custom-fonts","title":"Add custom fonts"}]},"frontmatter":{"title":"React Native","description":"Using RN to produce mobile apps"}}},"pageContext":{"id":"3cc4f373-90a9-5616-8628-d18d7a007705"}},"staticQueryHashes":["2575348879","2936798523","2940813629"]}